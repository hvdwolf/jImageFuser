package org.hvdw.jimagefuser;

import ch.qos.logback.classic.Logger;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import org.hvdw.jimagefuser.controllers.*;
import org.hvdw.jimagefuser.facades.IPreferencesFacade;
import org.hvdw.jimagefuser.model.GuiConfig;
import org.hvdw.jimagefuser.view.*;
import org.slf4j.LoggerFactory;

import javax.imageio.ImageIO;
import javax.swing.*;
import javax.swing.border.TitledBorder;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.ImageIcon;
import java.awt.*;
import java.awt.datatransfer.DataFlavor;
import java.awt.dnd.DnDConstants;
import java.awt.dnd.DropTarget;
import java.awt.dnd.DropTargetDropEvent;
import java.awt.event.*;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.lang.reflect.Method;
import java.util.*;
import java.util.List;


public class mainScreen {
    private final static Logger logger = (Logger) LoggerFactory.getLogger(mainScreen.class);

    private IPreferencesFacade prefs = IPreferencesFacade.defaultInstance;
    //private JFrame rootFrame;
    private JMenuBar menuBar;
    private JMenu myMenu;
    private JMenuItem menuItem;
    private JPanel rootPanel;
    private JButton buttonLoadImages;
    private JButton buttonShowImage;
    public JPanel LeftPanel;
    private JPanel LeftbuttonBar;
    private JScrollPane Leftscrollpane;
    private JTable tableListfiles;
    private JProgressBar progressBar;
    private JLabel OutputLabel;
    private JLabel JLabelDropReady;
    private JLabel lblLoadedFiles;
    private JPanel bottomPanel;
    private JSplitPane splitPanel;
    private JPanel RightPanel;
    private JButton btnEnfuse;
    private JButton btnAlignPreview;
    private JButton btnUpdatePreview;
    private JLabel lblPreview;
    private JPanel previewActionsPane;
    private JPanel ceateImgPane;
    private JTabbedPane OptionstabbedPane;
    private JCheckBox AIScheckBox;
    private JCheckBox setFiledateToExifCheckBox;
    private JCheckBox displayFusedImageCheckBox;
    private JSpinner spnrLevels;
    private JCheckBox autoLevelsCheckBox;
    private JCheckBox hardMaskcheckBox;
    private JCheckBox CIECAM02CheckBox;
    private JSpinner spnrSaturation;
    private JSpinner spnrExposure;
    private JSpinner spnrContrast;
    private JSpinner spnrEntropy;
    private JSpinner spnrwExposureOptimum;
    private JSpinner spnrwExposureWidth;
    private JButton btnResetEnfuse;
    private JSpinner spnrJpeg;
    private JComboBox cmbBoxTiff;
    private JPanel previewPane;
    private JSpinner spnrAIScontrolpoints;
    private JSpinner spnrScaleDown;
    private JCheckBox AutoHfovcheckBox;
    private JCheckBox fffisheyecheckBox;
    private JCheckBox OptAllExceptcheckBox;
    private JCheckBox assLinInputFilesCheckBox;
    private JSpinner spnrGridsize;
    private JSpinner spnrRemCPs;
    private JCheckBox blendAcrosscheckBox;
    private JButton btnResetAIS;
    private ImageIcon icon;


    public File[] files;
    public int[] selectedIndices;
    public List<Integer> selectedIndicesList = new ArrayList<Integer>();
    private int SelectedRow;
    public int SelectedCell;
    private int SelectedCopyFromImageIndex;  // Used for the copy metadata from ..

    public String exiftool_path = "";
    private ListSelectionModel listSelectionModel;

    private JPopupMenu myPopupMenu;

    // Initialize all the helper classes
    PreferencesDialog prefsDialog = new PreferencesDialog();
    private SimpleWebView WV = new SimpleWebView();


//////////////////////////////////////////////////////////////////////////////////
    // Define the several arrays for the several Edit panes on the right side. An interface or getter/setter methods would be more "correct java", but also
    // creates way more code which doesn't make it clearer either.

    public JPanel getRootPanel() {
        return rootPanel;
    }

    public JSplitPane getsplitPanel() {
        return splitPanel;
    }

    private JButton[] commandButtons() {
        return new JButton[]{buttonLoadImages, buttonShowImage, btnEnfuse, btnAlignPreview, btnUpdatePreview};
    }

    private JLabel[] mainScreenLabels() {
        return new JLabel[]{OutputLabel, lblLoadedFiles, lblPreview};
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        rootPanel = new JPanel();
        rootPanel.setLayout(new GridLayoutManager(2, 3, new Insets(10, 10, 10, 10), -1, -1));
        rootPanel.setMinimumSize(new Dimension(1100, 720));
        rootPanel.setPreferredSize(new Dimension(1350, 830));
        rootPanel.setRequestFocusEnabled(true);
        bottomPanel = new JPanel();
        bottomPanel.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, 0));
        rootPanel.add(bottomPanel, new GridConstraints(1, 0, 1, 3, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, 1, null, null, null, 1, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new FlowLayout(FlowLayout.LEFT, 15, 5));
        bottomPanel.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 2, false));
        lblLoadedFiles = new JLabel();
        lblLoadedFiles.setText("");
        panel1.add(lblLoadedFiles);
        final JLabel label1 = new JLabel();
        this.$$$loadLabelText$$$(label1, this.$$$getMessageFromBundle$$$("translations/program_strings", "pt.filesloaded"));
        panel1.add(label1);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        bottomPanel.add(panel2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        JLabelDropReady = new JLabel();
        JLabelDropReady.setText("");
        JLabelDropReady.setVisible(false);
        panel2.add(JLabelDropReady);
        OutputLabel = new JLabel();
        OutputLabel.setText("");
        panel2.add(OutputLabel);
        progressBar = new JProgressBar();
        progressBar.setIndeterminate(true);
        progressBar.setPreferredSize(new Dimension(100, 15));
        progressBar.setStringPainted(false);
        panel2.add(progressBar);
        splitPanel = new JSplitPane();
        splitPanel.setDividerLocation(288);
        rootPanel.add(splitPanel, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 1, false));
        LeftPanel = new JPanel();
        LeftPanel.setLayout(new GridLayoutManager(2, 1, new Insets(0, 0, 0, 0), -1, -1));
        splitPanel.setLeftComponent(LeftPanel);
        LeftbuttonBar = new JPanel();
        LeftbuttonBar.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        LeftPanel.add(LeftbuttonBar, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        buttonLoadImages = new JButton();
        this.$$$loadButtonText$$$(buttonLoadImages, this.$$$getMessageFromBundle$$$("translations/program_strings", "btn.loadimages"));
        buttonLoadImages.setToolTipText(this.$$$getMessageFromBundle$$$("translations/program_strings", "btn.loadimages"));
        LeftbuttonBar.add(buttonLoadImages);
        buttonShowImage = new JButton();
        buttonShowImage.setEnabled(false);
        this.$$$loadButtonText$$$(buttonShowImage, this.$$$getMessageFromBundle$$$("translations/program_strings", "btn.displayimages"));
        buttonShowImage.setToolTipText(this.$$$getMessageFromBundle$$$("translations/program_strings", "btn.displayimages"));
        buttonShowImage.putClientProperty("hideActionText", Boolean.FALSE);
        LeftbuttonBar.add(buttonShowImage);
        Leftscrollpane = new JScrollPane();
        LeftPanel.add(Leftscrollpane, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, new Dimension(220, -1), new Dimension(440, -1), null, 0, false));
        tableListfiles = new JTable();
        tableListfiles.setAutoResizeMode(0);
        tableListfiles.setPreferredScrollableViewportSize(new Dimension(-1, -1));
        tableListfiles.setShowHorizontalLines(true);
        tableListfiles.setShowVerticalLines(false);
        tableListfiles.setToolTipText(this.$$$getMessageFromBundle$$$("translations/program_strings", "lp.tooltip"));
        Leftscrollpane.setViewportView(tableListfiles);
        RightPanel = new JPanel();
        RightPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        RightPanel.setMaximumSize(new Dimension(550, 2147483647));
        RightPanel.setPreferredSize(new Dimension(550, 588));
        splitPanel.setRightComponent(RightPanel);
        ceateImgPane = new JPanel();
        ceateImgPane.setLayout(new FlowLayout(FlowLayout.RIGHT, 5, 5));
        RightPanel.add(ceateImgPane, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(550, -1), null, 0, false));
        btnEnfuse = new JButton();
        btnEnfuse.setEnabled(false);
        this.$$$loadButtonText$$$(btnEnfuse, this.$$$getMessageFromBundle$$$("translations/program_strings", "btn.enfusesave"));
        ceateImgPane.add(btnEnfuse);
        OptionstabbedPane = new JTabbedPane();
        RightPanel.add(OptionstabbedPane, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(200, 200), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 1, new Insets(5, 5, 0, 5), -1, -1));
        OptionstabbedPane.addTab("Main", panel3);
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel3.add(panel4, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_VERTICAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        AIScheckBox = new JCheckBox();
        AIScheckBox.setSelected(true);
        AIScheckBox.setText("Align Images");
        panel4.add(AIScheckBox, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        setFiledateToExifCheckBox = new JCheckBox();
        setFiledateToExifCheckBox.setText("Set filedate to exif data");
        panel4.add(setFiledateToExifCheckBox, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        displayFusedImageCheckBox = new JCheckBox();
        displayFusedImageCheckBox.setSelected(true);
        displayFusedImageCheckBox.setText("Display fused image");
        panel4.add(displayFusedImageCheckBox, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("<html>The defaults will normally give the best results.<br>If you want to fine tune your results, you can use the other tabs.");
        panel4.add(label2, new GridConstraints(0, 1, 3, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(400, -1), null, 3, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new GridLayoutManager(1, 1, new Insets(5, 5, 0, 5), -1, -1));
        OptionstabbedPane.addTab("Enfuse", panel5);
        final JPanel panel6 = new JPanel();
        panel6.setLayout(new GridLayoutManager(5, 6, new Insets(0, 5, 0, 5), -1, -1));
        panel5.add(panel6, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        spnrLevels = new JSpinner();
        panel6.add(spnrLevels, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Levels");
        panel6.add(label3, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        autoLevelsCheckBox = new JCheckBox();
        autoLevelsCheckBox.setSelected(true);
        autoLevelsCheckBox.setText("Autolevels");
        panel6.add(autoLevelsCheckBox, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        hardMaskcheckBox = new JCheckBox();
        hardMaskcheckBox.setText("HardMask");
        panel6.add(hardMaskcheckBox, new GridConstraints(2, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        CIECAM02CheckBox = new JCheckBox();
        CIECAM02CheckBox.setText("CIECAM02");
        panel6.add(CIECAM02CheckBox, new GridConstraints(3, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Saturation");
        panel6.add(label4, new GridConstraints(1, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spnrSaturation = new JSpinner();
        panel6.add(spnrSaturation, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("Exposure");
        panel6.add(label5, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spnrExposure = new JSpinner();
        panel6.add(spnrExposure, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        final JLabel label6 = new JLabel();
        label6.setText("Contrast");
        panel6.add(label6, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spnrContrast = new JSpinner();
        panel6.add(spnrContrast, new GridConstraints(2, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        final JLabel label7 = new JLabel();
        label7.setText("Entropy");
        panel6.add(label7, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spnrEntropy = new JSpinner();
        panel6.add(spnrEntropy, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        final JLabel label8 = new JLabel();
        label8.setText("Exposure optimum");
        panel6.add(label8, new GridConstraints(1, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label9 = new JLabel();
        label9.setText("Exposure width");
        panel6.add(label9, new GridConstraints(2, 4, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spnrwExposureOptimum = new JSpinner();
        panel6.add(spnrwExposureOptimum, new GridConstraints(1, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        spnrwExposureWidth = new JSpinner();
        panel6.add(spnrwExposureWidth, new GridConstraints(2, 5, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        btnResetEnfuse = new JButton();
        this.$$$loadButtonText$$$(btnResetEnfuse, this.$$$getMessageFromBundle$$$("translations/program_strings", "btn.resetdefs"));
        panel6.add(btnResetEnfuse, new GridConstraints(3, 4, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        blendAcrosscheckBox = new JCheckBox();
        blendAcrosscheckBox.setText("Blend across -180/+180");
        panel6.add(blendAcrosscheckBox, new GridConstraints(4, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel7 = new JPanel();
        panel7.setLayout(new GridLayoutManager(4, 4, new Insets(0, 5, 0, 5), -1, -1));
        OptionstabbedPane.addTab("Align_Image_Stack", panel7);
        final JLabel label10 = new JLabel();
        label10.setText("No. of control points");
        panel7.add(label10, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spnrAIScontrolpoints = new JSpinner();
        panel7.add(spnrAIScontrolpoints, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label11 = new JLabel();
        label11.setText("Remove CPs with error >");
        panel7.add(label11, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spnrScaleDown = new JSpinner();
        panel7.add(spnrScaleDown, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        final JLabel label12 = new JLabel();
        label12.setText("Scale image down bty 2^scale");
        panel7.add(label12, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        AutoHfovcheckBox = new JCheckBox();
        AutoHfovcheckBox.setSelected(true);
        AutoHfovcheckBox.setText("Auto HFOV");
        panel7.add(AutoHfovcheckBox, new GridConstraints(0, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fffisheyecheckBox = new JCheckBox();
        fffisheyecheckBox.setText("Full Frame Fisheye images");
        panel7.add(fffisheyecheckBox, new GridConstraints(1, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        OptAllExceptcheckBox = new JCheckBox();
        OptAllExceptcheckBox.setText("Optimize all except first");
        panel7.add(OptAllExceptcheckBox, new GridConstraints(2, 2, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        assLinInputFilesCheckBox = new JCheckBox();
        assLinInputFilesCheckBox.setText("Assume linear input files");
        panel7.add(assLinInputFilesCheckBox, new GridConstraints(3, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label13 = new JLabel();
        label13.setText("Grid size (default 5 => (5x5))");
        panel7.add(label13, new GridConstraints(3, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spnrGridsize = new JSpinner();
        panel7.add(spnrGridsize, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        spnrRemCPs = new JSpinner();
        panel7.add(spnrRemCPs, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), null, 0, false));
        btnResetAIS = new JButton();
        this.$$$loadButtonText$$$(btnResetAIS, this.$$$getMessageFromBundle$$$("translations/program_strings", "btn.resetdefs"));
        panel7.add(btnResetAIS, new GridConstraints(3, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel8 = new JPanel();
        panel8.setLayout(new GridLayoutManager(3, 3, new Insets(5, 5, 0, 5), -1, -1));
        OptionstabbedPane.addTab("Output options", panel8);
        final JLabel label14 = new JLabel();
        label14.setText("<html>The used compression is determined from the image extension that you choose when saving the image.");
        panel8.add(label14, new GridConstraints(0, 0, 1, 3, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spnrJpeg = new JSpinner();
        panel8.add(spnrJpeg, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(50, -1), new Dimension(50, -1), 0, false));
        final JLabel label15 = new JLabel();
        label15.setText("JPEG compression");
        panel8.add(label15, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label16 = new JLabel();
        label16.setText("TIFF compression");
        panel8.add(label16, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cmbBoxTiff = new JComboBox();
        panel8.add(cmbBoxTiff, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), new Dimension(150, -1), 0, false));
        previewActionsPane = new JPanel();
        previewActionsPane.setLayout(new FlowLayout(FlowLayout.LEFT, 5, 5));
        RightPanel.add(previewActionsPane, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, new Dimension(550, -1), null, 0, false));
        btnAlignPreview = new JButton();
        btnAlignPreview.setEnabled(false);
        this.$$$loadButtonText$$$(btnAlignPreview, this.$$$getMessageFromBundle$$$("translations/program_strings", "btn.alignpreview"));
        previewActionsPane.add(btnAlignPreview);
        btnUpdatePreview = new JButton();
        btnUpdatePreview.setEnabled(false);
        this.$$$loadButtonText$$$(btnUpdatePreview, this.$$$getMessageFromBundle$$$("translations/program_strings", "btn.updatepreview"));
        previewActionsPane.add(btnUpdatePreview);
        previewPane = new JPanel();
        previewPane.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        RightPanel.add(previewPane, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        previewPane.setBorder(BorderFactory.createTitledBorder(BorderFactory.createLoweredBevelBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        lblPreview = new JLabel();
        lblPreview.setText("");
        previewPane.add(lblPreview, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(500, 500), null, 0, false));
    }

    private static Method $$$cachedGetBundleMethod$$$ = null;

    private String $$$getMessageFromBundle$$$(String path, String key) {
        ResourceBundle bundle;
        try {
            Class<?> thisClass = this.getClass();
            if ($$$cachedGetBundleMethod$$$ == null) {
                Class<?> dynamicBundleClass = thisClass.getClassLoader().loadClass("com.intellij.DynamicBundle");
                $$$cachedGetBundleMethod$$$ = dynamicBundleClass.getMethod("getBundle", String.class, Class.class);
            }
            bundle = (ResourceBundle) $$$cachedGetBundleMethod$$$.invoke(null, path, thisClass);
        } catch (Exception e) {
            bundle = ResourceBundle.getBundle(path);
        }
        return bundle.getString(key);
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadLabelText$$$(JLabel component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setDisplayedMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return rootPanel;
    }


    // endregion

    // region Action Listeners and radio button groups
    /*
    / The SpecialMenuActionListener is a menu linstener for the special function loadImages that is so tightly integrated
    / with the Gui that we can't take it out.
     */
    public class SpecialMenuActionListener implements ActionListener {

        public void actionPerformed(ActionEvent ev) {
            String[] dummy = null;
            logger.info("Selected: {}", ev.getActionCommand());

            switch (ev.getActionCommand()) {
                case "Load Images":
                    logger.debug("menu File -> Load Images pressed");
                    // identical to button "Load Images"
                    files = Utils.loadImages("images", rootPanel, LeftPanel, tableListfiles, commandButtons(), mainScreenLabels(), progressBar);
                    break;
                default:
                    break;
            }
        }
    }


    /*
    / the programButtonListeners functions brings all buttons from the main screen together in one method.
    / Where possible, the actionlistener will be put externally to the GuiActionListeners class.
    / Only the buttons that are too "intimately" coupled to the Gui and can't be moved, will be dealt with
    / directly in this method. Unfortunately that are quite some buttons.
     */
    private void programButtonListeners() {

        selectedIndicesList = MyVariables.getselectedIndicesList();

        // Main screen left panel
        buttonLoadImages.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                logger.debug("button buttonLoadImages pressed");
                //File opener: Load the images; identical to Menu option Load Images.
                createHashMap("preview");
                files = Utils.loadImages("images", rootPanel, LeftPanel, tableListfiles, commandButtons(), mainScreenLabels(), progressBar);
            }
        });
        buttonShowImage.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                logger.debug("button buttonShowImage pressed");
                Utils.displaySelectedImageInExternalViewer();
            }
        });
        lblPreview.addMouseListener(new MouseAdapter() {
            @Override
            public void mouseClicked(MouseEvent mouseEvent) {
                super.mouseClicked(mouseEvent);
                if (mouseEvent.getClickCount() == 2) {
                    MyVariables.setSelectedImagePath(MyVariables.getFusedImage());
                    JavaImageViewer JIV = new JavaImageViewer();
                    JIV.ViewImageInFullscreenFrame("singleimage");
                    logger.info("double-click registered from the preview image");
                }
            }
        });
        btnResetEnfuse.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                ResetEnfuseCheckBoxesSpinners();
            }
        });
        btnEnfuse.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                File savetofile = StandardFileIO.AskSaveToFile(rootPanel);
                if (!(savetofile == null)) {
                    try {
                        MyVariables.setFusedImage(savetofile.getCanonicalPath());
                    } catch (IOException e) {
                        logger.error("error converting requested filename to string");
                        e.printStackTrace();
                    }
                    createHashMap("full");
                    String result = SavedFusedImage.enfuseImages("full", progressBar, OutputLabel);
                    OutputLabel.setText("");
                    progressBar.setVisible(false);
                    if (!"too long".equals(result) && (displayFusedImageCheckBox.isSelected())) {
                        MyVariables.setSelectedImagePath(result);
                        JavaImageViewer JIV = new JavaImageViewer();
                        JIV.ViewImageInFullscreenFrame("singleimage");
                    }
                    //JOptionPane.showMessageDialog(rootPanel, "You selected to save to:\n" + savetofile.getPath(), "selected file", JOptionPane.INFORMATION_MESSAGE);
                }
            }
        });
        btnResetAIS.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent actionEvent) {
                ResetAISCheckboxesSpinners();
            }
        });
    }


    public static void TableMouseListener(JTable tableListfiles) {
        // Use the mouse listener for the single cell double-click selection for the left table to be able to
        // display the image in the default viewer

        tableListfiles.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent mouseEvent) {
                JTable table = (JTable) mouseEvent.getSource();
                Point point = mouseEvent.getPoint();
                int row = table.rowAtPoint(point);
                if (mouseEvent.getClickCount() == 2 && table.getSelectedRow() != -1) {
                    Utils.displaySelectedImageInExternalViewer();
                    logger.info("double-click registered from thumbstable");
                }
            }
        });
    }

    // This is the general table listener that also enables multi row selection
    class SharedListSelectionHandler implements ListSelectionListener {

        public void valueChanged(ListSelectionEvent e) {
            // Perfectly working row selection method of first program
            List<Integer> tmpselectedIndices = new ArrayList<>();
            ListSelectionModel lsm = (ListSelectionModel) e.getSource();

            if (lsm.isSelectionEmpty()) {
                logger.debug("no index selected");
            } else {
                // Find out which indexes are selected.
                int minIndex = lsm.getMinSelectionIndex();
                int maxIndex = lsm.getMaxSelectionIndex();
                for (int i = minIndex; i <= maxIndex; i++) {
                    if (lsm.isSelectedIndex(i)) {
                        tmpselectedIndices.add(i);
                        SelectedRow = i;
                        MyVariables.setSelectedRow(i);
                    }
                }
                selectedIndices = tmpselectedIndices.stream().mapToInt(Integer::intValue).toArray();
                logger.debug("Selected indices: {}", tmpselectedIndices);
                selectedIndicesList = tmpselectedIndices;
                MyVariables.setselectedIndicesList(selectedIndicesList);
                MyVariables.setSelectedFilenamesIndices(selectedIndices);
            }

        }
    }

    //////////////////////////////////////////////////////////////////////////////////////////////
    public void rootPanelDropListener() {
        //Listen to drop events

        rootPanel.setDropTarget(new DropTarget() {
            public synchronized void drop(DropTargetDropEvent evt) {
                try {
                    evt.acceptDrop(DnDConstants.ACTION_COPY);
                    List<File> droppedFiles = (List<File>)
                            evt.getTransferable().getTransferData(DataFlavor.javaFileListFlavor);
                    for (File file : droppedFiles) {
                        logger.debug("File path is: {}", file.getPath());
                    }
                    File[] droppedFilesArray = (File[]) droppedFiles.toArray(new File[droppedFiles.size()]);
                    MyVariables.setLoadedFiles(droppedFilesArray);
                    //loadImages("dropped files");
                    files = Utils.loadImages("dropped files", rootPanel, LeftPanel, tableListfiles, commandButtons(), mainScreenLabels(), progressBar);
                    SavedFusedImage.displayPreview(lblPreview);
                } catch (Exception ex) {
                    ex.printStackTrace();
                    logger.error("Drag drop on rootpanel error {}", ex);
                }
            }
        });
    }


    /*
    / This creates the menu with the listener in its own external MenuActionListener class
     */
    private void createMenuBar(JFrame frame) {
        menuBar = new JMenuBar();

        // Due to the Load Iamge method with its own ActionListener we do the first menu items here
        // File menu
        myMenu = new JMenu(ResourceBundle.getBundle("translations/program_strings").getString("menu.file"));
        myMenu.setMnemonic(KeyEvent.VK_F);
        menuBar.add(myMenu);
        menuItem = new JMenuItem(ResourceBundle.getBundle("translations/program_strings").getString("fmenu.loadimages"));
        myMenu.setMnemonic(KeyEvent.VK_L);
        menuItem.setActionCommand("Load Images");
        //menuItem.addActionListener(mal);
        menuItem.addActionListener(new SpecialMenuActionListener());
        myMenu.add(menuItem);

        // Now we continue with the rest of the entire menu outside the mainScreen in the external CreateMenu class
        CreateMenu crMenu = new CreateMenu();
        crMenu.CreateMenuBar(frame, rootPanel, splitPanel, menuBar, myMenu, OutputLabel, progressBar);
    }


    // Sets the necessary screen texts. We choose this way as we have now more control over width
    // without bothering the translators with <html></html> and/or <br> codes or length of total string(s).
    private void setProgramScreenTextsDefaults() {
        String version = "";

        logger.trace("check for exiftool version");
        String exiftool = Utils.platformExiftool();
        List<String> cmdparams = new ArrayList<>();
        Application.OS_NAMES currentOsName = Utils.getCurrentOsName();
        logger.info("OS name {}", currentOsName);

        lblPreview.setIcon(ImageFunctions.LoadProgramPNG());

        // Spinner defaults
        // Enfuse
        spnrLevels.setModel(new SpinnerNumberModel(23, 1, 23, 1));
        // Note that a spinner does not allow floats or doubles, neither as an array. Upon reading the spinner value we need to convert String to double
        String spinnerValues[] = {"0", "0.1", "0.2", "0.3", "0.4", "0.5", "0.6", "0.7", "0.8", "0.9", "1.0"};
        SpinnerListModel expModel = new SpinnerListModel(spinnerValues);
        spnrExposure.setModel(expModel);
        spnrExposure.setValue("1.0");
        SpinnerListModel satModel = new SpinnerListModel(spinnerValues);
        spnrSaturation.setModel(satModel);
        spnrSaturation.setValue("0.2");
        SpinnerListModel contModel = new SpinnerListModel(spinnerValues);
        spnrContrast.setModel(contModel);
        spnrContrast.setValue("0");
        SpinnerListModel entModel = new SpinnerListModel(spinnerValues);
        spnrEntropy.setModel(entModel);
        spnrEntropy.setValue("0");
        SpinnerListModel expOptModel = new SpinnerListModel(spinnerValues);
        spnrwExposureOptimum.setModel(expOptModel);
        spnrwExposureOptimum.setValue("0.5");
        /*SpinnerListModel expWidthModel = new SpinnerListModel(spinnerValues);
        spnrwExposureWidth.setModel(expWidthModel);
        spnrwExposureWidth.setValue("0.2");*/
        //Align_Image_Stack
        spnrAIScontrolpoints.setModel(new SpinnerNumberModel(8, 1, 15, 1));
        spnrRemCPs.setModel(new SpinnerNumberModel(3, 1, 25, 1));
        spnrScaleDown.setModel(new SpinnerNumberModel(1, 1, 10, 1));
        spnrGridsize.setModel(new SpinnerNumberModel(5, 2, 25, 1));

        spnrJpeg.setModel(new SpinnerNumberModel(90, 1, 100, 1));
        cmbBoxTiff.setModel(new DefaultComboBoxModel(new String[]{"LZW", "Deflate", "Packbits", "None"}));
    }

    private void ResetEnfuseCheckBoxesSpinners() {
        spnrLevels.setValue(23);
        autoLevelsCheckBox.setSelected(true);
        hardMaskcheckBox.setSelected(false);
        CIECAM02CheckBox.setSelected(false);
        spnrExposure.setValue("1.0");
        spnrSaturation.setValue("0.2");
        spnrContrast.setValue("0");
        spnrEntropy.setValue("0");
        spnrwExposureOptimum.setValue("0.5");
        spnrwExposureWidth.setValue("0.2");
        // Now refresh paramerers in our hashmap. In this case imagestype is not important
        //createHashMap("preview");
    }

    private void ResetAISCheckboxesSpinners() {
        spnrAIScontrolpoints.setValue(8);
        spnrRemCPs.setValue(3);
        spnrScaleDown.setValue(1);
        spnrGridsize.setValue(5);
        AutoHfovcheckBox.setSelected(true);
        fffisheyecheckBox.setSelected(false);
        OptAllExceptcheckBox.setSelected(false);
        assLinInputFilesCheckBox.setSelected(false);
        // Now refresh paramerers in our hashmap. In this case imagestype is not important
        //createHashMap("preview");
    }


    ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
    // This is where it all starts
    // initialisation of the Application
    public mainScreen(JFrame frame) throws IOException, InterruptedException {
        boolean preferences = false;

        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                GuiConfig.SetSplitPaneDivider(splitPanel);
            }
        });

        // Do not simply exit on closing the window. First delete our temp stuff and save gui settings
        frame.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
        frame.addWindowListener(new WindowAdapter() {
            @Override
            public void windowClosing(WindowEvent e) {
                StandardFileIO.deleteDirectory(new File(MyVariables.gettmpWorkFolder()));
                GuiConfig.SaveGuiConfig(frame, rootPanel, splitPanel);
                System.exit(0);
            }
        });

        Utils.progressStatus(progressBar, false);

        createMenuBar(frame);
        //createPopupMenu(myPopupMenu);


        // Delete and recreate {tmp dir}/jimagefuser
        String check_result = StandardFileIO.RecreateOurTempFolder();
        if (!"Success".equals(check_result)) {
            JOptionPane.showMessageDialog(rootPanel, "Could not (re)create our temporary working folder", "error (re)creating temp folder", JOptionPane.ERROR_MESSAGE);
        }
        // Now check the preferences
        CheckPreferences CP = new CheckPreferences();
        preferences = CP.checkPreferences(rootPanel, OutputLabel);
        if (!preferences) {
            ExifTool.checkExifTool(mainScreen.this.rootPanel);
        }

        //Use the table listener for the selection of multiple cells
        listSelectionModel = tableListfiles.getSelectionModel();
        tableListfiles.setRowSelectionAllowed(true);
        tableListfiles.setSelectionMode(ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        listSelectionModel.addListSelectionListener(new SharedListSelectionHandler());

        TableMouseListener(tableListfiles);

        //Listen to drop events
        rootPanelDropListener();

        // Make left "tableListfiles" and right "ListexiftoolInfotable" tables read-only (un-editable)
        // This also fixes the double-click bug on the image where it retrieves the object name of the images on double-click
        tableListfiles.setDefaultEditor(Object.class, null);

        // icon for my dialogs
        InputStream stream = StandardFileIO.getResourceAsStream("icons/jimagefuser-64.png");
        try {
            icon = new ImageIcon(ImageIO.read(stream));
        } catch (IOException ex) {
            logger.error("Error executing command");
        }


        programButtonListeners();
        // Some texts
        setProgramScreenTextsDefaults();

        //Check on command line arguments
        if (MyVariables.getcommandLineArgsgiven()) {
            List<File> filesList = new ArrayList<File>();
            File[] files = CommandLineArguments.ProcessArguments(filesList);
            MyVariables.setLoadedFiles(files);
            OutputLabel.setText("Creating preview");
            files = Utils.loadImages("commandline", rootPanel, LeftPanel, tableListfiles, commandButtons(), mainScreenLabels(), progressBar);
            SavedFusedImage.displayPreview(lblPreview);
        }

        Utils.checkForNewVersion("startup");

    }

    /**
     * This hashmap contains all program parameters for aligning, fusing and the output settings.
     * It is passed on by a getter/setter
     *
     * @param imagestype
     */
    private void createHashMap(String imagestype) {
        HashMap<String, String> parameters = new HashMap<>();

        // General
        parameters.put("imagestype", imagestype);
        parameters.put("AIScheckBox", String.valueOf(AIScheckBox.isSelected()));
        parameters.put("setFiledateToExifCheckBox", String.valueOf(setFiledateToExifCheckBox.isSelected()));
        parameters.put("displayFusedImageCheckBox", String.valueOf(displayFusedImageCheckBox.isSelected()));
        //Enfuse parameters
        parameters.put("spnrLevels", String.valueOf(spnrLevels.getValue()));
        parameters.put("autoLevelsCheckBox", String.valueOf(autoLevelsCheckBox.isSelected()));
        parameters.put("hardMaskcheckBox", String.valueOf(hardMaskcheckBox.isSelected()));
        parameters.put("CIECAM02CheckBox", String.valueOf(CIECAM02CheckBox.isSelected()));
        parameters.put("blendAcrosscheckBox", String.valueOf(blendAcrosscheckBox.isSelected()));
        parameters.put("spnrExposure", String.valueOf(spnrExposure.getValue()));
        parameters.put("spnrSaturation", String.valueOf(spnrSaturation.getValue()));
        parameters.put("spnrContrast", String.valueOf(spnrContrast.getValue()));
        parameters.put("spnrEntropy", String.valueOf(spnrEntropy.getValue()));
        parameters.put("spnrwExposureOptimum", String.valueOf(spnrwExposureOptimum.getValue()));
        parameters.put("spnrwExposureWidth", String.valueOf(spnrwExposureWidth.getValue()));
        //Align_image_stack
        parameters.put("spnrAIScontrolpoints", String.valueOf(spnrAIScontrolpoints.getValue()));
        parameters.put("spnrRemCPs", String.valueOf((spnrRemCPs.getValue())));
        parameters.put("spnrScaleDown", String.valueOf(spnrScaleDown.getValue()));
        parameters.put("spnrGridsize", String.valueOf(spnrGridsize.getValue()));
        parameters.put("AutoHfovcheckBox", String.valueOf(AutoHfovcheckBox.isSelected()));
        parameters.put("fffisheyecheckBox", String.valueOf(fffisheyecheckBox.isSelected()));
        parameters.put("OptAllExceptcheckBox", String.valueOf(OptAllExceptcheckBox.isSelected()));
        parameters.put("assLinInputFilesCheckBox", String.valueOf(assLinInputFilesCheckBox.isSelected()));
        // Output
        parameters.put("spnrJpeg", String.valueOf(spnrJpeg.getValue()));
        parameters.put("cmbBoxTiff", String.valueOf(cmbBoxTiff.getSelectedItem()));

        MyVariables.setParameters(parameters);
    }


    static void createAndShowGUI() {

        JFrame frame = new JFrame("jImageFuser V" + ProgramTexts.Version);

        // Should work, but doesn't work
        Application.OS_NAMES os = Utils.getCurrentOsName();
        try {
            if (os == Application.OS_NAMES.APPLE) {
                logger.info("running on Apple. set correct menu");
                // take the menu bar off the jframe and put it in the MacOS menu
                System.setProperty("apple.laf.useScreenMenuBar", "true");
                // set the name of the application menu item
                System.setProperty("com.apple.mrj.application.apple.menu.about.name", "jImageFuser V" + ProgramTexts.Version);
            }
            // Significantly improves the look of the output in
            // terms of the folder/file icons and file names returned by FileSystemView!
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
            //UIManager.setLookAndFeel(UIManager.getCrossPlatformLookAndFeelClassName());
            //UIManager.setLookAndFeel(GTKLookAndFeel);
        } catch (Exception weTried) {
            logger.error("Could not start GUI.", weTried);
        }

        frame.setIconImage(Utils.getFrameIcon());
        try {
            frame.setContentPane(new mainScreen(frame).rootPanel);
        } catch (InterruptedException | IOException e) {
            e.printStackTrace();
            logger.error("InterruptedException or IOException: {}", e);
        }

        logger.debug("Gui Width x Height: {} x {}", frame.getWidth(), String.valueOf(frame.getHeight()));
        GuiConfig.LoadGuiConfig(frame);
        //frame.setLocationRelativeTo(null);
        frame.setLocationByPlatform(true);
        frame.setVisible(true);

    }
}
